// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package genesis

import (
	"encoding/json"
	"math/big"

	"github.com/celo-org/celo-blockchain/common/decimal/bigintstr"
	"github.com/celo-org/celo-blockchain/common/decimal/fixed"
)

var _ = (*ElectionParametersMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (e ElectionParameters) MarshalJSON() ([]byte, error) {
	type ElectionParameters struct {
		MinElectableValidators uint64               `json:"minElectableValidators"`
		MaxElectableValidators uint64               `json:"maxElectableValidators"`
		MaxVotesPerAccount     *bigintstr.BigIntStr `json:"maxVotesPerAccount"`
		ElectabilityThreshold  *fixed.Fixed         `json:"electabilityThreshold"`
	}
	var enc ElectionParameters
	enc.MinElectableValidators = e.MinElectableValidators
	enc.MaxElectableValidators = e.MaxElectableValidators
	enc.MaxVotesPerAccount = (*bigintstr.BigIntStr)(e.MaxVotesPerAccount)
	enc.ElectabilityThreshold = e.ElectabilityThreshold
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (e *ElectionParameters) UnmarshalJSON(input []byte) error {
	type ElectionParameters struct {
		MinElectableValidators *uint64              `json:"minElectableValidators"`
		MaxElectableValidators *uint64              `json:"maxElectableValidators"`
		MaxVotesPerAccount     *bigintstr.BigIntStr `json:"maxVotesPerAccount"`
		ElectabilityThreshold  *fixed.Fixed         `json:"electabilityThreshold"`
	}
	var dec ElectionParameters
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.MinElectableValidators != nil {
		e.MinElectableValidators = *dec.MinElectableValidators
	}
	if dec.MaxElectableValidators != nil {
		e.MaxElectableValidators = *dec.MaxElectableValidators
	}
	if dec.MaxVotesPerAccount != nil {
		e.MaxVotesPerAccount = (*big.Int)(dec.MaxVotesPerAccount)
	}
	if dec.ElectabilityThreshold != nil {
		e.ElectabilityThreshold = dec.ElectabilityThreshold
	}
	return nil
}
