version: 2.1
executors:
  golang:
    docker:
      - image: circleci/golang:1.13
    working_directory: ~/repos/geth
  e2e:
    docker:
      - image: celohq/node10-gcloud
    working_directory: ~/repos/celo-monorepo/packages/celotool
    environment:
      GO_VERSION: "1.13.7"
      CELO_MONOREPO_BRANCH_TO_TEST: mc/geth1.9-final
jobs:
  build-bls-zexe:
    docker:
      - image: circleci/rust:1.37.0
    working_directory: ~/repos/geth
    steps:
      - checkout
      - run:
          name: Setup Rust language
          command: |
            rustup install 1.37.0
            rustup default 1.37.0
      - run:
          name: Compile bls-zexe
          command: |
            export PATH=$PATH:$HOME/.cargo/bin
            make bls-zexe

      - persist_to_workspace:
          root: ~/repos
          paths:
            - geth
  build-geth:
    executor: golang
    steps:
      - attach_workspace:
          at: ~/repos
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
      - run: 
          name: Build Geth
          command: go run build/ci.go install
      - save_cache:
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"          
      - persist_to_workspace:
          root: ~/repos
          paths:
            - geth          
  unit-tests:
    executor: golang
    steps:
      - attach_workspace:
          at: ~/repos 
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}          
      - run: go get github.com/jstemmer/go-junit-report
      - run: 
          name: Run Tests
          command: |
            mkdir -p /tmp/test-results
            trap "go-junit-report < /tmp/test-results/go-test.out > /tmp/test-results/go-test-report.xml" EXIT
            go run build/ci.go test -v | tee /tmp/test-results/go-test.out
      - store_artifacts:
          path: /tmp/test-results
          destination: raw-test-output

      - store_test_results:
          path: /tmp/test-results            

  coverage:
    executor: golang
    steps:
      - attach_workspace:
          at: ~/repos
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}          
      - run: go run build/ci.go test -coverage
      - run: bash <(curl -s https://codecov.io/bash)

  lint:
    executor: golang
    steps:
      - attach_workspace:
          at: ~/repos                  
      - run: go get github.com/jstemmer/go-junit-report        
      - run: 
          name: Run Linter
          command: |
            mkdir -p /tmp/test-results
            go run build/ci.go ensure-linter
            ./build/cache/golangci-lint-1.23.6-linux-amd64/golangci-lint run --config .golangci.yml --out-format junit-xml ./... | tee /tmp/test-results/go-lint-report.xml
      - store_artifacts:
          path: /tmp/test-results
          destination: raw-test-output
      - store_test_results:
          path: /tmp/test-results                

  android:
    docker:
      - image: celohq/circleci:android-v1
    working_directory: ~/repos/geth
    steps:
      - checkout
      - run:
          name: Compile android client
          command: make android
      - persist_to_workspace:
          root: ~/repos
          paths:
            - geth/build/bin/geth.aar

  ios:
    macos:
      xcode: "11.3.1"
    working_directory: ~/repos/geth
    steps:
      - checkout
      - run:
          name: Setup Go language
          command: |
            HOMEBREW_NO_AUTO_UPDATE=1 brew install go
            # Check that homebrew installed the expected go version
            if [[ "$(go version)" != "go version go1.13"* ]]; then 
              echo "go1.13 is required"
              exit 1
            fi
      - run:
          name: Setup Rust language
          command: curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain 1.37.0
      - run:
          name: Compile ios client
          command: make ios
      - persist_to_workspace:
          root: ~/repos
          paths:
            - geth/build/bin/Geth.framework.tgz
            - geth/vendor/github.com/celo-org/bls-zexe/bls/target/universal/release/libbls_zexe.a
            - geth/vendor/github.com/celo-org/bls-zexe/bls/target/universal/release/libbls_snark.a

  publish-mobile-client:
    docker:
      - image: circleci/node:10
    working_directory: ~/repos/geth
    steps:
      - attach_workspace:
          at: ~/repos
      - run: ./scripts/publish-mobile-client.sh ${CIRCLE_SHA1} ${NPM_TOKEN_FOR_CELO_CLIENT}

  checkout-monorepo:
    executor: e2e
    working_directory: ~/repos
    steps:
      - run:
          name: Setup celo-monorepo
          command: |
            git clone --depth 1 https://github.com/celo-org/celo-monorepo.git celo-monorepo -b ${CELO_MONOREPO_BRANCH_TO_TEST}
            cd celo-monorepo
            yarn install || yarn install
            # separate build to avoid ENOMEM in CI :(
            yarn build --scope @celo/utils
            yarn build --scope @celo/protocol
            yarn build --scope docs
            yarn build --scope @celo/walletkit
            yarn build --ignore @celo/protocol --ignore docs --ignore @celo/walletkit --ignore @celo/web --ignore @celo/mobile --ignore @celo/react-components
      - run:
          name: Setup Go language
          command: |
            mkdir -p ~/repos/golang
            wget https://dl.google.com/go/go${GO_VERSION}.linux-amd64.tar.gz
            tar xf go${GO_VERSION}.linux-amd64.tar.gz -C ~/repos/golang
            ~/repos/golang/go/bin/go version
      - persist_to_workspace:
          root: ~/repos
          paths:
            - celo-monorepo
            - golang

  end-to-end-transfer-test:
    executor: e2e
    steps:
      - attach_workspace:
          at: ~/repos
      - run:
          name: Geth transfer test
          no_output_timeout: 15m
          command: |
            export PATH=${PATH}:~/repos/golang/go/bin
            ./ci_test_transfers.sh local ~/repos/geth

  end-to-end-sync-test:
    executor: e2e
    steps:
      - attach_workspace:
          at: ~/repos
      - run:
          name: Geth sync with a standalone node test
          command: |
            export PATH=${PATH}:~/repos/golang/go/bin
            ./ci_test_sync.sh local ~/repos/geth

  end-to-end-blockchain-parameters-test:
    executor: e2e
    steps:
      - attach_workspace:
          at: ~/repos
      - run:
          name: Geth sync with a standalone nod~e test
          command: |
            export PATH=${PATH}:~/repos/golang/go/bin
            ./ci_test_blockchain_parameters.sh local ~/repos/geth

  end-to-end-geth-governance-test:
    executor: e2e
    # Source: https://circleci.com/docs/2.0/configuration-reference/#resource_class
    resource_class: medium+
    steps:
      - attach_workspace:
          at: ~/repos
      - run:
          name: Geth goverenance with a standalone node
          no_output_timeout: "1200s"
          command: |
            export PATH=${PATH}:~/repos/golang/go/bin
            ./ci_test_governance.sh local ~/repos/geth

workflows:
  version: 2
  build:
    jobs:
      - build-bls-zexe
      - checkout-monorepo      
      - build-geth:
          requires:
            - build-bls-zexe
      - lint:
          requires:
            - build-geth
      - unit-tests:
          requires:
            - build-geth
      - coverage:
          requires:
            - build-geth
      - android
      - ios
      - publish-mobile-client:
          requires:
            - android
            - ios
            # Makes sure tests are all green before publishing
            # Though these are not using the mobile built binaries
            # they should be a good indicator
            - unit-tests
            - end-to-end-transfer-test
            - end-to-end-sync-test
            - end-to-end-blockchain-parameters-test
            - end-to-end-geth-governance-test
          filters:
            branches:
              only: master
      
      - end-to-end-transfer-test:
          requires:
            - checkout-monorepo
            - build-geth
      - end-to-end-sync-test:
          requires:
            - checkout-monorepo
            - build-geth
      - end-to-end-blockchain-parameters-test:
          requires:
            - checkout-monorepo
            - build-geth
      - end-to-end-geth-governance-test:
          requires:
            - checkout-monorepo
            - build-geth
