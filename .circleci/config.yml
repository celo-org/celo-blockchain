version: 2.1
parameters:
  # Increment this to force cache rebuilding
  system-contracts-cache-version:
    type: integer
    default: 1
  # Use this git tag or commit of the monorepo to build the system contracts.
  system-contracts-monorepo-version:
    type: string
    default: "celo-core-contracts-v3.rc0"
  system-contracts-path:
    type: string
    default: "compiled-system-contracts"
executors:
  golang:
    docker:
      - image: circleci/golang:1.16
    working_directory: ~/repos/geth
  node-v10:
    docker:
      - image: celohq/node10-gcloud:v3
    working_directory: ~/repos/geth
  e2e:
    docker:
      - image: celohq/node10-gcloud:v3
    working_directory: ~/repos/celo-monorepo/packages/celotool
    environment:
      GO_VERSION: "1.16.4"
      # CELO_MONOREPO_COMMIT_OR_BRANCH should point to a monorepo commit which is known to work, so that
      # our CI doesn't break due to another team making changes in monorepo.
      # * It should be updated when:
      #     (a) changes or additions are made to the blockchain e2e tests in celo-monorepo, or
      #     (b) a new contracts release has been merged to monorepo's master
      #    In the latter case, we need to check whether the new contract release breaks things and update the mycelo
      #    contracts ABI and migrations accordingly if necessary.
      # * When updating it, update the comment with (a) the branch or commit hash, (b) the date of the change, and
      #   (c) the contracts release it includes (`RELEASE_TAG` in the monorepo)

      # b16a2d472a7cf24858f9d8b33a7185c8b81a261a is the current commit on master as of August 25, 2021, and
      # includes contracts release 5 (core-contracts.v5)
      CELO_MONOREPO_COMMIT_OR_BRANCH: b16a2d472a7cf24858f9d8b33a7185c8b81a261a

      GITHUB_RSA_FINGERPRINT: SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8
jobs:
  build-geth:
    executor: golang
    resource_class: medium+
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
      - run:
          name: Build Geth
          command: go run build/ci.go install
      - save_cache:
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"
      - persist_to_workspace:
          root: ~/repos
          paths:
            - geth

  prepare-system-contracts:
    parameters:
      cache-key:
        type: string
        default: system-contracts-cache-<<pipeline.parameters.system-contracts-monorepo-version>>-<<pipeline.parameters.system-contracts-path>>-v<<pipeline.parameters.system-contracts-cache-version>>
    executor: node-v10
    resource_class: medium+
    steps:
      - checkout
      - restore_cache:
          keys:
            - <<parameters.cache-key>>
      - attach_workspace:
          at: ~/repos
      - run:
          name: prepare system contracts
          # Runs make prepare-system-contracts and sets the MONOREPO_COMMIT to
          # use We also need to add the fingerprint id for the github ssh key
          # to our known hosts in order for the monorepo post install script to
          # work. We only do this if the cache has not been restored.
          command: |
            set -e
            if [ ! -d <<pipeline.parameters.system-contracts-path>> ]; then
              mkdir ~/.ssh && ssh-keyscan github.com >> ~/.ssh/known_hosts
              make prepare-system-contracts MONOREPO_COMMIT=<<pipeline.parameters.system-contracts-monorepo-version>>
            fi
      - save_cache:
          key: <<parameters.cache-key>>
          paths:
            - ~/repos/geth/<<pipeline.parameters.system-contracts-path>>
      - persist_to_workspace:
          root: ~/repos
          paths:
            - geth/<<pipeline.parameters.system-contracts-path>>

  unit-tests:
    executor: golang
    resource_class: medium+
    steps:
      - attach_workspace:
          at: ~/repos
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
      - run: go get github.com/jstemmer/go-junit-report
      - run:
          name: Run Tests
          command: |
            mkdir -p /tmp/test-results
            trap "go-junit-report < /tmp/test-results/go-test.out > /tmp/test-results/go-test-report.xml" EXIT
            go run build/ci.go test -v | tee /tmp/test-results/go-test.out
      - store_artifacts:
          path: /tmp/test-results
          destination: raw-test-output

      - store_test_results:
          path: /tmp/test-results

  coverage:
    executor: golang
    resource_class: medium+
    steps:
      - attach_workspace:
          at: ~/repos
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
      - run: go run build/ci.go test -coverage
      - run: bash <(curl -s https://codecov.io/bash)

  istanbul-e2e-coverage:
    executor: golang
    resource_class: medium+
    steps:
      - attach_workspace:
          at: ~/repos
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
        # Run the tests with coverage parse the coverage and output the summary
      - run: 
          name: Run tests and print coverage summary
          command: |
            go test -coverprofile cov.out -coverpkg ./consensus/istanbul/... ./e2e_test 
            go run tools/parsecov/main.go -packagePrefix github.com/celo-org/celo-blockchain/ cov.out > summary
            cat summary

      - run: 
          name: Post summary comment on PR
          command: |
            # Only post on PR if this build is running on a PR. If this build
            # is running on a PR then CIRCLE_PULL_REQUEST contains the link to
            # the PR.
            if [[ ! -z ${CIRCLE_PULL_REQUEST} ]] ; then
              # Build comment
              echo "Coverage from tests in \`./e2e_test/...\` for \`./consensus/istanbul/...\` at commit ${CIRCLE_SHA1}" > comment
              echo "\`\`\`" >> comment
              cat summary >> comment
              echo "\`\`\`" >> comment

              # This command is quite involved, its posting the comment on the
              # associated PR.
              # ${CIRCLE_PULL_REQUEST##*/} expands to just the pr number at the
              # end of the PR link.
              # "{\"body\":\"`awk -v ORS='\\\\n' '1' comment`\"}" evaluates to
              # a json object with comment as the content of body with newlines
              # replaced by '\n'. Using backtics causes there to be a round of
              # backslash processing on the command before execution, so we
              # need to double the backslashes in the awk command.
              curl -u piersy:${PR_COMMENT_TOKEN} -X POST \
              https://api.github.com/repos/celo-org/celo-blockchain/issues/${CIRCLE_PULL_REQUEST##*/}/comments \
              -d "{\"body\":\"`awk -v ORS='\\\\n' '1' comment`\"}" ;
            fi

  lint:
    executor: golang
    steps:
      - attach_workspace:
          at: ~/repos
      - run: go get github.com/jstemmer/go-junit-report
      - run:
          name: Run Linter
          command: |
            mkdir -p /tmp/test-results
            go run build/ci.go ensure-linter
            ./build/cache/golangci-lint-1.25.0-linux-amd64/golangci-lint run --config .golangci.yml --out-format junit-xml ./... | tee /tmp/test-results/go-lint-report.xml
      - store_artifacts:
          path: /tmp/test-results
          destination: raw-test-output
      - store_test_results:
          path: /tmp/test-results

  check-imports:
    executor: golang
    steps:
      - checkout
      - run:
          name: Check imports to ensure we are using github.com/celo-org/celo-blockchain
          command: ./scripts/check_imports.sh

  android:
    docker:
      - image: celohq/circleci:android-v2
    working_directory: ~/repos/geth
    steps:
      - checkout
      - run:
          name: Compile android client
          command: make android
      - persist_to_workspace:
          root: ~/repos
          paths:
            - geth/build/bin/geth.aar

  ios:
    macos:
      xcode: "11.3.1"
    working_directory: ~/repos/geth
    steps:
      - checkout
      - run:
          name: Setup Go language
          command: |
            brew install go@1.16
            brew link go@1.16
            # Check that homebrew installed the expected go version
            if [[ "$(go version)" != "go version go1.16"* ]]; then
              echo "go1.16 is required"
              exit 1
            fi
      - run:
          name: Compile ios client
          command: make ios
      - persist_to_workspace:
          root: ~/repos
          paths:
            - geth/build/bin/Geth.framework.tgz
            - geth/libbls_snark_sys.a

  publish-mobile-client:
    docker:
      - image: circleci/node:10
    working_directory: ~/repos/geth
    steps:
      - attach_workspace:
          at: ~/repos
      - run: ./scripts/publish-mobile-client.sh ${CIRCLE_SHA1} ${NPM_TOKEN_FOR_CELO_CLIENT}

  lightest-sync-test:
    executor: golang
    steps:
      - attach_workspace:
          at: ~/repos
      - run: DATADIR=/tmp/lightest_sync_test_data MODE=lightest ./scripts/sync_test.sh

  checkout-monorepo:
    executor: e2e
    working_directory: ~/repos
    steps:
      - run:
          name: Setup celo-monorepo
          command: |
            set -e
            mkdir ~/.ssh && ssh-keyscan github.com >> ~/.ssh/known_hosts
            ssh-keygen -F github.com -l -f ~/.ssh/known_hosts | grep "github.com RSA ${GITHUB_RSA_FINGERPRINT}"
            git clone --depth 1 https://github.com/celo-org/celo-monorepo.git celo-monorepo
            cd celo-monorepo
            git fetch --depth 1 origin ${CELO_MONOREPO_COMMIT_OR_BRANCH}
            git checkout ${CELO_MONOREPO_COMMIT_OR_BRANCH}
            yarn install || yarn install
            yarn build --scope @celo/celotool --include-filtered-dependencies
      - run:
          name: Setup Go language
          command: |
            mkdir -p ~/repos/golang
            wget https://dl.google.com/go/go${GO_VERSION}.linux-amd64.tar.gz
            tar xf go${GO_VERSION}.linux-amd64.tar.gz -C ~/repos/golang
            ~/repos/golang/go/bin/go version
      - persist_to_workspace:
          root: ~/repos
          paths:
            - celo-monorepo
            - golang

  end-to-end-blockchain-parameters-test:
    executor: e2e
    resource_class: large
    steps:
      - attach_workspace:
          at: ~/repos
      - run:
          name: End-to-end test of governable blockchain parameters
          command: |
            export PATH=${PATH}:~/repos/golang/go/bin
            ./ci_test_blockchain_parameters.sh local ~/repos/geth

  end-to-end-governance-test:
    executor: e2e
    resource_class: xlarge
    steps:
      - attach_workspace:
          at: ~/repos
      - run:
          name: End-to-end test of proof-of-stake
          no_output_timeout: 15m
          command: |
            export PATH=${PATH}:~/repos/golang/go/bin
            ./ci_test_governance.sh local ~/repos/geth

  end-to-end-sync-test:
    executor: e2e
    resource_class: large
    steps:
      - attach_workspace:
          at: ~/repos
      - run:
          name: End-to-end test of syncing
          no_output_timeout: 15m
          command: |
            export PATH=${PATH}:~/repos/golang/go/bin
            ./ci_test_sync.sh local ~/repos/geth

  end-to-end-slashing-test:
    executor: e2e
    resource_class: large
    steps:
      - attach_workspace:
          at: ~/repos
      - run:
          name: End-to-end test of slashing
          no_output_timeout: 15m
          command: |
            export PATH=${PATH}:~/repos/golang/go/bin
            ./ci_test_slashing.sh local ~/repos/geth

  end-to-end-transfer-test:
    executor: e2e
    resource_class: large
    steps:
      - attach_workspace:
          at: ~/repos
      - run:
          name: End-to-end test of transfers
          no_output_timeout: 15m
          command: |
            export PATH=${PATH}:~/repos/golang/go/bin
            ./ci_test_transfers.sh local ~/repos/geth

  end-to-end-validator-order-test:
    executor: e2e
    resource_class: xlarge
    steps:
      - attach_workspace:
          at: ~/repos
      - run:
          name: End-to-end test of random validator order
          no_output_timeout: 15m
          command: |
            export PATH=${PATH}:~/repos/golang/go/bin
            ./ci_test_validator_order.sh local ~/repos/geth

workflows:
  version: 2
  build:
    jobs:
      - checkout-monorepo
      - build-geth
      - prepare-system-contracts
      - check-imports
      - lint:
          requires:
            - build-geth
      - unit-tests:
          requires:
            - build-geth
            - prepare-system-contracts
      - coverage:
          requires:
            - build-geth
            - prepare-system-contracts
      - istanbul-e2e-coverage:
          requires:
            - build-geth
            - prepare-system-contracts
      - android
      - ios
      - publish-mobile-client:
          requires:
            - android
            - ios
            # Makes sure tests are all green before publishing
            # Though these are not using the mobile built binaries
            # they should be a good indicator
            - unit-tests
            - lightest-sync-test
            - end-to-end-blockchain-parameters-test
            - end-to-end-governance-test
            - end-to-end-slashing-test
            - end-to-end-sync-test
            - end-to-end-transfer-test
            - end-to-end-validator-order-test
          filters:
            branches:
              only: master
      - lightest-sync-test:
          requires:
            - build-geth
      - end-to-end-blockchain-parameters-test:
          requires:
            - checkout-monorepo
            - build-geth
      - end-to-end-governance-test:
          requires:
            - checkout-monorepo
            - build-geth
      - end-to-end-slashing-test:
          requires:
            - checkout-monorepo
            - build-geth
      - end-to-end-sync-test:
          requires:
            - checkout-monorepo
            - build-geth
      - end-to-end-transfer-test:
          requires:
            - checkout-monorepo
            - build-geth
      - end-to-end-validator-order-test:
          requires:
            - checkout-monorepo
            - build-geth
