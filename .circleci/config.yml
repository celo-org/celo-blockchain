version: 2

geth-defaults: &geth-defaults
  docker:
    - image: circleci/golang:1.12

rust-defaults: &rust-defaults
  docker:
    - image: circleci/rust:1.37.0

end-to-end-defaults: &end-to-end-defaults
  docker:
    - image: celohq/node10-gcloud
  environment:
    CELO_MONOREPO_BRANCH_TO_TEST: master

jobs:
  unit-tests:
    <<: *geth-defaults
    working_directory: ~/repos/geth
    steps:
      - attach_workspace:
          at: ~/repos
      - run: build/env.sh go run build/ci.go test

  coverage:
    <<: *geth-defaults
    working_directory: ~/repos/geth
    steps:
      - attach_workspace:
          at: ~/repos
      - run: build/env.sh go run build/ci.go test -coverage
      - run: bash <(curl -s https://codecov.io/bash)

  lint:
    <<: *geth-defaults
    working_directory: ~/repos/geth
    steps:
      - checkout
      - run: build/env.sh go run build/ci.go lint

  bls-zexe:
    <<: *rust-defaults
    working_directory: ~/repos/geth
    steps:
      - checkout
      - run:
          name: Setup Rust language
          command: |
            set -euo pipefail
            rustup install 1.37.0
            rustup default 1.37.0
      - run:
          name: Compile bls-zexe
          command: |
            set -euo pipefail
            export PATH=$PATH:$HOME/.cargo/bin
            make bls-zexe

      - persist_to_workspace:
          root: ~/repos
          paths:
            - geth

  android:
    docker:
      - image: celohq/android-client
        user: circleci
    working_directory: ~/repos/geth
    steps:
      - checkout
      - run:
          name: Compile android client
          command: |
            set -euo pipefail
            # TODO(jeanregisser): Fix docker image so build works directly with circleci user
            sudo chown -R circleci:circleci $HOME/.rustup $HOME/.cargo
            export PATH=$PATH:$HOME/.cargo/bin
            export NDK_VERSION=android-ndk-r19c
            export ANDROID_NDK=/opt/android/${NDK_VERSION}
            export ANDROID_HOME=/opt/android/sdk
            make android
      - persist_to_workspace:
          root: ~/repos
          paths:
            - geth/build/bin/geth.aar

  ios:
    macos:
      xcode: "11.3.1"
    working_directory: ~/repos/geth
    steps:
      - checkout
      - run:
          name: Setup Go language
          command: HOMEBREW_NO_AUTO_UPDATE=1 brew install go@1.11
      - run:
          name: Setup Rust language
          command: |
            set -euo pipefail
            curl https://sh.rustup.rs -sSf | sh -s -- -y
            export PATH=$PATH:$HOME/.cargo/bin
            rustup install 1.37.0
            rustup default 1.37.0
      - run:
          name: Compile ios client
          command: |
            set -euo pipefail
            export PATH="/usr/local/opt/go@1.11/bin:$HOME/.cargo/bin:$PATH"
            make ios
      - persist_to_workspace:
          root: ~/repos
          paths:
            - geth/build/bin/Geth.framework.tgz
            - geth/vendor/github.com/celo-org/bls-zexe/bls/target/universal/release/libbls_zexe.a
            - geth/vendor/github.com/celo-org/bls-zexe/bls/target/universal/release/libbls_snark.a

  publish-mobile-client:
    docker:
      - image: circleci/node:10
    working_directory: ~/repos/geth
    steps:
      - attach_workspace:
          at: ~/repos
      - run: ./scripts/publish-mobile-client.sh ${CIRCLE_SHA1} ${NPM_TOKEN_FOR_CELO_CLIENT}

  end-to-end-monorepo-checkout:
    <<: *end-to-end-defaults
    working_directory: ~/repos/celo-monorepo
    steps:
      - run:
          name: Setup celo-monorepo
          command: |
            set -euo pipefail
            export CELO_MONOREPO_DIR="$PWD"
            git clone --depth 1 https://github.com/celo-org/celo-monorepo.git ${CELO_MONOREPO_DIR} -b ${CELO_MONOREPO_BRANCH_TO_TEST}
            yarn install || yarn install
            # separate build to avoid ENOMEM in CI :(
            yarn build --scope @celo/utils
            yarn build --scope @celo/protocol
            yarn build --scope docs
            yarn build --scope @celo/walletkit
            yarn build --ignore @celo/protocol --ignore docs --ignore @celo/walletkit --ignore @celo/web --ignore @celo/mobile --ignore @celo/react-components
      - run:
          name: Setup Go language
          command: |
            set -euo pipefail
            export CELO_MONOREPO_DIR="$PWD"
            GO_LANG_DIR="${CELO_MONOREPO_DIR}/golang"
            mkdir -p ${GO_LANG_DIR}
            wget https://dl.google.com/go/go1.11.5.linux-amd64.tar.gz
            tar xf go1.11.5.linux-amd64.tar.gz -C ${GO_LANG_DIR}
            ${GO_LANG_DIR}/go/bin/go version
      - persist_to_workspace:
          root: ~/repos
          paths:
            - celo-monorepo

  end-to-end-transfer-test:
    <<: *end-to-end-defaults
    working_directory: ~/repos
    steps:
      - attach_workspace:
          at: ~/repos
      - run:
          name: Geth transfer test
          no_output_timeout: 15m
          command: |
            export CELO_MONOREPO_DIR="$HOME/repos/celo-monorepo"
            export GO_LANG_DIR="$CELO_MONOREPO_DIR/golang"
            ${GO_LANG_DIR}/go/bin/go version
            export PATH=${PATH}:${GO_LANG_DIR}/go/bin
            cd ${CELO_MONOREPO_DIR}/packages/celotool
            ./ci_test_transfers.sh local ~/repos/geth

  end-to-end-sync-test:
    <<: *end-to-end-defaults
    working_directory: ~/repos
    steps:
      - attach_workspace:
          at: ~/repos
      - run:
          name: Geth sync with a standalone node test
          command: |
            export CELO_MONOREPO_DIR="$HOME/repos/celo-monorepo"
            export GO_LANG_DIR="$CELO_MONOREPO_DIR/golang"
            ${GO_LANG_DIR}/go/bin/go version
            export PATH=${PATH}:${GO_LANG_DIR}/go/bin
            cd ${CELO_MONOREPO_DIR}/packages/celotool
            ./ci_test_sync.sh local ~/repos/geth

  end-to-end-blockchain-parameters-test:
    <<: *end-to-end-defaults
    working_directory: ~/repos
    steps:
      - attach_workspace:
          at: ~/repos
      - run:
          name: Geth sync with a standalone node test
          command: |
            export CELO_MONOREPO_DIR="$HOME/repos/celo-monorepo"
            export GO_LANG_DIR="$CELO_MONOREPO_DIR/golang"
            ${GO_LANG_DIR}/go/bin/go version
            export PATH=${PATH}:${GO_LANG_DIR}/go/bin
            cd ${CELO_MONOREPO_DIR}/packages/celotool
            ./ci_test_blockchain_parameters.sh local ~/repos/geth

  end-to-end-geth-governance-test:
    <<: *end-to-end-defaults
    # Source: https://circleci.com/docs/2.0/configuration-reference/#resource_class
    resource_class: medium+
    working_directory: ~/repos
    steps:
      - attach_workspace:
          at: ~/repos
      - run:
          name: Geth goverenance with a standalone node
          no_output_timeout: "1200s"
          command: |
            export CELO_MONOREPO_DIR="$HOME/repos/celo-monorepo"
            export GO_LANG_DIR="$CELO_MONOREPO_DIR/golang"
            ${GO_LANG_DIR}/go/bin/go version
            export PATH=${PATH}:${GO_LANG_DIR}/go/bin
            cd ${CELO_MONOREPO_DIR}/packages/celotool
            ./ci_test_governance.sh local ~/repos/geth

workflows:
  version: 2
  build:
    jobs:
      - bls-zexe
      - lint
      - android
      - ios
      - publish-mobile-client:
          requires:
            - android
            - ios
            # Makes sure tests are all green before publishing
            # Though these are not using the mobile built binaries
            # they should be a good indicator
            - unit-tests
            - end-to-end-transfer-test
            - end-to-end-sync-test
            - end-to-end-blockchain-parameters-test
            - end-to-end-geth-governance-test
          filters:
            branches:
              only: master
      - end-to-end-monorepo-checkout
      - unit-tests:
          requires:
            - bls-zexe
      - coverage:
          requires:
            - bls-zexe
      - end-to-end-transfer-test:
          requires:
            - end-to-end-monorepo-checkout
            - bls-zexe
      - end-to-end-sync-test:
          requires:
            - end-to-end-monorepo-checkout
            - bls-zexe
      - end-to-end-blockchain-parameters-test:
          requires:
            - end-to-end-monorepo-checkout
            - bls-zexe
      - end-to-end-geth-governance-test:
          requires:
            - end-to-end-monorepo-checkout
            - bls-zexe
