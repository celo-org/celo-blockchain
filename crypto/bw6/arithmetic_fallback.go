// +build !amd64 generic

package bw6

// Native go field arithmetic code is generated with goff https://github.com/ConsenSys/goff
// * Most of the function signatures are edited or renamed.
// * Assigned and lazy operations are added.

import (
	"math/bits"
)

// element_ops_noasm.go
// Copyright 2020 ConsenSys AG
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by goff (v0.3.2) DO NOT EDIT

func add(z, x, y *fe) {
	var carry uint64

	z[0], carry = bits.Add64(x[0], y[0], 0)
	z[1], carry = bits.Add64(x[1], y[1], carry)
	z[2], carry = bits.Add64(x[2], y[2], carry)
	z[3], carry = bits.Add64(x[3], y[3], carry)
	z[4], carry = bits.Add64(x[4], y[4], carry)
	z[5], carry = bits.Add64(x[5], y[5], carry)
	z[6], carry = bits.Add64(x[6], y[6], carry)
	z[7], carry = bits.Add64(x[7], y[7], carry)
	z[8], carry = bits.Add64(x[8], y[8], carry)
	z[9], carry = bits.Add64(x[9], y[9], carry)
	z[10], carry = bits.Add64(x[10], y[10], carry)
	z[11], _ = bits.Add64(x[11], y[11], carry)

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[11] < 81882988782276106 || (z[11] == 81882988782276106 && (z[10] < 15098257552581525310 || (z[10] == 15098257552581525310 && (z[9] < 13341377791855249032 || (z[9] == 13341377791855249032 && (z[8] < 5945444129596489281 || (z[8] == 5945444129596489281 && (z[7] < 8105254717682411801 || (z[7] == 8105254717682411801 && (z[6] < 274362232328168196 || (z[6] == 274362232328168196 && (z[5] < 9694500593442880912 || (z[5] == 9694500593442880912 && (z[4] < 8204665564953313070 || (z[4] == 8204665564953313070 && (z[3] < 10998096788944562424 || (z[3] == 10998096788944562424 && (z[2] < 1588918198704579639 || (z[2] == 1588918198704579639 && (z[1] < 16614129118623039618 || (z[1] == 16614129118623039618 && (z[0] < 17626244516597989515))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 17626244516597989515, 0)
		z[1], b = bits.Sub64(z[1], 16614129118623039618, b)
		z[2], b = bits.Sub64(z[2], 1588918198704579639, b)
		z[3], b = bits.Sub64(z[3], 10998096788944562424, b)
		z[4], b = bits.Sub64(z[4], 8204665564953313070, b)
		z[5], b = bits.Sub64(z[5], 9694500593442880912, b)
		z[6], b = bits.Sub64(z[6], 274362232328168196, b)
		z[7], b = bits.Sub64(z[7], 8105254717682411801, b)
		z[8], b = bits.Sub64(z[8], 5945444129596489281, b)
		z[9], b = bits.Sub64(z[9], 13341377791855249032, b)
		z[10], b = bits.Sub64(z[10], 15098257552581525310, b)
		z[11], _ = bits.Sub64(z[11], 81882988782276106, b)
	}
}

func addAssign(z, y *fe) {
	var carry uint64

	z[0], carry = bits.Add64(z[0], y[0], 0)
	z[1], carry = bits.Add64(z[1], y[1], carry)
	z[2], carry = bits.Add64(z[2], y[2], carry)
	z[3], carry = bits.Add64(z[3], y[3], carry)
	z[4], carry = bits.Add64(z[4], y[4], carry)
	z[5], carry = bits.Add64(z[5], y[5], carry)
	z[6], carry = bits.Add64(z[6], y[6], carry)
	z[7], carry = bits.Add64(z[7], y[7], carry)
	z[8], carry = bits.Add64(z[8], y[8], carry)
	z[9], carry = bits.Add64(z[9], y[9], carry)
	z[10], carry = bits.Add64(z[10], y[10], carry)
	z[11], _ = bits.Add64(z[11], y[11], carry)

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[11] < 81882988782276106 || (z[11] == 81882988782276106 && (z[10] < 15098257552581525310 || (z[10] == 15098257552581525310 && (z[9] < 13341377791855249032 || (z[9] == 13341377791855249032 && (z[8] < 5945444129596489281 || (z[8] == 5945444129596489281 && (z[7] < 8105254717682411801 || (z[7] == 8105254717682411801 && (z[6] < 274362232328168196 || (z[6] == 274362232328168196 && (z[5] < 9694500593442880912 || (z[5] == 9694500593442880912 && (z[4] < 8204665564953313070 || (z[4] == 8204665564953313070 && (z[3] < 10998096788944562424 || (z[3] == 10998096788944562424 && (z[2] < 1588918198704579639 || (z[2] == 1588918198704579639 && (z[1] < 16614129118623039618 || (z[1] == 16614129118623039618 && (z[0] < 17626244516597989515))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 17626244516597989515, 0)
		z[1], b = bits.Sub64(z[1], 16614129118623039618, b)
		z[2], b = bits.Sub64(z[2], 1588918198704579639, b)
		z[3], b = bits.Sub64(z[3], 10998096788944562424, b)
		z[4], b = bits.Sub64(z[4], 8204665564953313070, b)
		z[5], b = bits.Sub64(z[5], 9694500593442880912, b)
		z[6], b = bits.Sub64(z[6], 274362232328168196, b)
		z[7], b = bits.Sub64(z[7], 8105254717682411801, b)
		z[8], b = bits.Sub64(z[8], 5945444129596489281, b)
		z[9], b = bits.Sub64(z[9], 13341377791855249032, b)
		z[10], b = bits.Sub64(z[10], 15098257552581525310, b)
		z[11], _ = bits.Sub64(z[11], 81882988782276106, b)
	}
}

func ladd(z, x, y *fe) {
	var carry uint64

	z[0], carry = bits.Add64(x[0], y[0], 0)
	z[1], carry = bits.Add64(x[1], y[1], carry)
	z[2], carry = bits.Add64(x[2], y[2], carry)
	z[3], carry = bits.Add64(x[3], y[3], carry)
	z[4], carry = bits.Add64(x[4], y[4], carry)
	z[5], carry = bits.Add64(x[5], y[5], carry)
	z[6], carry = bits.Add64(x[6], y[6], carry)
	z[7], carry = bits.Add64(x[7], y[7], carry)
	z[8], carry = bits.Add64(x[8], y[8], carry)
	z[9], carry = bits.Add64(x[9], y[9], carry)
	z[10], carry = bits.Add64(x[10], y[10], carry)
	z[11], _ = bits.Add64(x[11], y[11], carry)
}

func laddAssign(z, y *fe) {
	var carry uint64

	z[0], carry = bits.Add64(z[0], y[0], 0)
	z[1], carry = bits.Add64(z[1], y[1], carry)
	z[2], carry = bits.Add64(z[2], y[2], carry)
	z[3], carry = bits.Add64(z[3], y[3], carry)
	z[4], carry = bits.Add64(z[4], y[4], carry)
	z[5], carry = bits.Add64(z[5], y[5], carry)
	z[6], carry = bits.Add64(z[6], y[6], carry)
	z[7], carry = bits.Add64(z[7], y[7], carry)
	z[8], carry = bits.Add64(z[8], y[8], carry)
	z[9], carry = bits.Add64(z[9], y[9], carry)
	z[10], carry = bits.Add64(z[10], y[10], carry)
	z[11], _ = bits.Add64(z[11], y[11], carry)
}

func double(z, x *fe) {
	var carry uint64

	z[0], carry = bits.Add64(x[0], x[0], 0)
	z[1], carry = bits.Add64(x[1], x[1], carry)
	z[2], carry = bits.Add64(x[2], x[2], carry)
	z[3], carry = bits.Add64(x[3], x[3], carry)
	z[4], carry = bits.Add64(x[4], x[4], carry)
	z[5], carry = bits.Add64(x[5], x[5], carry)
	z[6], carry = bits.Add64(x[6], x[6], carry)
	z[7], carry = bits.Add64(x[7], x[7], carry)
	z[8], carry = bits.Add64(x[8], x[8], carry)
	z[9], carry = bits.Add64(x[9], x[9], carry)
	z[10], carry = bits.Add64(x[10], x[10], carry)
	z[11], _ = bits.Add64(x[11], x[11], carry)

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[11] < 81882988782276106 || (z[11] == 81882988782276106 && (z[10] < 15098257552581525310 || (z[10] == 15098257552581525310 && (z[9] < 13341377791855249032 || (z[9] == 13341377791855249032 && (z[8] < 5945444129596489281 || (z[8] == 5945444129596489281 && (z[7] < 8105254717682411801 || (z[7] == 8105254717682411801 && (z[6] < 274362232328168196 || (z[6] == 274362232328168196 && (z[5] < 9694500593442880912 || (z[5] == 9694500593442880912 && (z[4] < 8204665564953313070 || (z[4] == 8204665564953313070 && (z[3] < 10998096788944562424 || (z[3] == 10998096788944562424 && (z[2] < 1588918198704579639 || (z[2] == 1588918198704579639 && (z[1] < 16614129118623039618 || (z[1] == 16614129118623039618 && (z[0] < 17626244516597989515))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 17626244516597989515, 0)
		z[1], b = bits.Sub64(z[1], 16614129118623039618, b)
		z[2], b = bits.Sub64(z[2], 1588918198704579639, b)
		z[3], b = bits.Sub64(z[3], 10998096788944562424, b)
		z[4], b = bits.Sub64(z[4], 8204665564953313070, b)
		z[5], b = bits.Sub64(z[5], 9694500593442880912, b)
		z[6], b = bits.Sub64(z[6], 274362232328168196, b)
		z[7], b = bits.Sub64(z[7], 8105254717682411801, b)
		z[8], b = bits.Sub64(z[8], 5945444129596489281, b)
		z[9], b = bits.Sub64(z[9], 13341377791855249032, b)
		z[10], b = bits.Sub64(z[10], 15098257552581525310, b)
		z[11], _ = bits.Sub64(z[11], 81882988782276106, b)
	}
}

func doubleAssign(z *fe) {
	var carry uint64

	z[0], carry = bits.Add64(z[0], z[0], 0)
	z[1], carry = bits.Add64(z[1], z[1], carry)
	z[2], carry = bits.Add64(z[2], z[2], carry)
	z[3], carry = bits.Add64(z[3], z[3], carry)
	z[4], carry = bits.Add64(z[4], z[4], carry)
	z[5], carry = bits.Add64(z[5], z[5], carry)
	z[6], carry = bits.Add64(z[6], z[6], carry)
	z[7], carry = bits.Add64(z[7], z[7], carry)
	z[8], carry = bits.Add64(z[8], z[8], carry)
	z[9], carry = bits.Add64(z[9], z[9], carry)
	z[10], carry = bits.Add64(z[10], z[10], carry)
	z[11], _ = bits.Add64(z[11], z[11], carry)

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[11] < 81882988782276106 || (z[11] == 81882988782276106 && (z[10] < 15098257552581525310 || (z[10] == 15098257552581525310 && (z[9] < 13341377791855249032 || (z[9] == 13341377791855249032 && (z[8] < 5945444129596489281 || (z[8] == 5945444129596489281 && (z[7] < 8105254717682411801 || (z[7] == 8105254717682411801 && (z[6] < 274362232328168196 || (z[6] == 274362232328168196 && (z[5] < 9694500593442880912 || (z[5] == 9694500593442880912 && (z[4] < 8204665564953313070 || (z[4] == 8204665564953313070 && (z[3] < 10998096788944562424 || (z[3] == 10998096788944562424 && (z[2] < 1588918198704579639 || (z[2] == 1588918198704579639 && (z[1] < 16614129118623039618 || (z[1] == 16614129118623039618 && (z[0] < 17626244516597989515))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 17626244516597989515, 0)
		z[1], b = bits.Sub64(z[1], 16614129118623039618, b)
		z[2], b = bits.Sub64(z[2], 1588918198704579639, b)
		z[3], b = bits.Sub64(z[3], 10998096788944562424, b)
		z[4], b = bits.Sub64(z[4], 8204665564953313070, b)
		z[5], b = bits.Sub64(z[5], 9694500593442880912, b)
		z[6], b = bits.Sub64(z[6], 274362232328168196, b)
		z[7], b = bits.Sub64(z[7], 8105254717682411801, b)
		z[8], b = bits.Sub64(z[8], 5945444129596489281, b)
		z[9], b = bits.Sub64(z[9], 13341377791855249032, b)
		z[10], b = bits.Sub64(z[10], 15098257552581525310, b)
		z[11], _ = bits.Sub64(z[11], 81882988782276106, b)
	}
}

func ldouble(z, x *fe) {
	var carry uint64

	z[0], carry = bits.Add64(x[0], x[0], 0)
	z[1], carry = bits.Add64(x[1], x[1], carry)
	z[2], carry = bits.Add64(x[2], x[2], carry)
	z[3], carry = bits.Add64(x[3], x[3], carry)
	z[4], carry = bits.Add64(x[4], x[4], carry)
	z[5], carry = bits.Add64(x[5], x[5], carry)
	z[6], carry = bits.Add64(x[6], x[6], carry)
	z[7], carry = bits.Add64(x[7], x[7], carry)
	z[8], carry = bits.Add64(x[8], x[8], carry)
	z[9], carry = bits.Add64(x[9], x[9], carry)
	z[10], carry = bits.Add64(x[10], x[10], carry)
	z[11], _ = bits.Add64(x[11], x[11], carry)
}

func ldoubleAssign(z *fe) {
	var carry uint64

	z[0], carry = bits.Add64(z[0], z[0], 0)
	z[1], carry = bits.Add64(z[1], z[1], carry)
	z[2], carry = bits.Add64(z[2], z[2], carry)
	z[3], carry = bits.Add64(z[3], z[3], carry)
	z[4], carry = bits.Add64(z[4], z[4], carry)
	z[5], carry = bits.Add64(z[5], z[5], carry)
	z[6], carry = bits.Add64(z[6], z[6], carry)
	z[7], carry = bits.Add64(z[7], z[7], carry)
	z[8], carry = bits.Add64(z[8], z[8], carry)
	z[9], carry = bits.Add64(z[9], z[9], carry)
	z[10], carry = bits.Add64(z[10], z[10], carry)
	z[11], _ = bits.Add64(z[11], z[11], carry)
}

func sub(z, x, y *fe) {
	var b uint64
	z[0], b = bits.Sub64(x[0], y[0], 0)
	z[1], b = bits.Sub64(x[1], y[1], b)
	z[2], b = bits.Sub64(x[2], y[2], b)
	z[3], b = bits.Sub64(x[3], y[3], b)
	z[4], b = bits.Sub64(x[4], y[4], b)
	z[5], b = bits.Sub64(x[5], y[5], b)
	z[6], b = bits.Sub64(x[6], y[6], b)
	z[7], b = bits.Sub64(x[7], y[7], b)
	z[8], b = bits.Sub64(x[8], y[8], b)
	z[9], b = bits.Sub64(x[9], y[9], b)
	z[10], b = bits.Sub64(x[10], y[10], b)
	z[11], b = bits.Sub64(x[11], y[11], b)
	if b != 0 {
		var c uint64
		z[0], c = bits.Add64(z[0], 17626244516597989515, 0)
		z[1], c = bits.Add64(z[1], 16614129118623039618, c)
		z[2], c = bits.Add64(z[2], 1588918198704579639, c)
		z[3], c = bits.Add64(z[3], 10998096788944562424, c)
		z[4], c = bits.Add64(z[4], 8204665564953313070, c)
		z[5], c = bits.Add64(z[5], 9694500593442880912, c)
		z[6], c = bits.Add64(z[6], 274362232328168196, c)
		z[7], c = bits.Add64(z[7], 8105254717682411801, c)
		z[8], c = bits.Add64(z[8], 5945444129596489281, c)
		z[9], c = bits.Add64(z[9], 13341377791855249032, c)
		z[10], c = bits.Add64(z[10], 15098257552581525310, c)
		z[11], _ = bits.Add64(z[11], 81882988782276106, c)
	}
}

func subAssign(z, y *fe) {
	var b uint64
	z[0], b = bits.Sub64(z[0], y[0], 0)
	z[1], b = bits.Sub64(z[1], y[1], b)
	z[2], b = bits.Sub64(z[2], y[2], b)
	z[3], b = bits.Sub64(z[3], y[3], b)
	z[4], b = bits.Sub64(z[4], y[4], b)
	z[5], b = bits.Sub64(z[5], y[5], b)
	z[6], b = bits.Sub64(z[6], y[6], b)
	z[7], b = bits.Sub64(z[7], y[7], b)
	z[8], b = bits.Sub64(z[8], y[8], b)
	z[9], b = bits.Sub64(z[9], y[9], b)
	z[10], b = bits.Sub64(z[10], y[10], b)
	z[11], b = bits.Sub64(z[11], y[11], b)
	if b != 0 {
		var c uint64
		z[0], c = bits.Add64(z[0], 17626244516597989515, 0)
		z[1], c = bits.Add64(z[1], 16614129118623039618, c)
		z[2], c = bits.Add64(z[2], 1588918198704579639, c)
		z[3], c = bits.Add64(z[3], 10998096788944562424, c)
		z[4], c = bits.Add64(z[4], 8204665564953313070, c)
		z[5], c = bits.Add64(z[5], 9694500593442880912, c)
		z[6], c = bits.Add64(z[6], 274362232328168196, c)
		z[7], c = bits.Add64(z[7], 8105254717682411801, c)
		z[8], c = bits.Add64(z[8], 5945444129596489281, c)
		z[9], c = bits.Add64(z[9], 13341377791855249032, c)
		z[10], c = bits.Add64(z[10], 15098257552581525310, c)
		z[11], _ = bits.Add64(z[11], 81882988782276106, c)
	}
}

func lsub(z, x, y *fe) {
	var b uint64
	z[0], b = bits.Sub64(x[0], y[0], 0)
	z[1], b = bits.Sub64(x[1], y[1], b)
	z[2], b = bits.Sub64(x[2], y[2], b)
	z[3], b = bits.Sub64(x[3], y[3], b)
	z[4], b = bits.Sub64(x[4], y[4], b)
	z[5], b = bits.Sub64(x[5], y[5], b)
	z[6], b = bits.Sub64(x[6], y[6], b)
	z[7], b = bits.Sub64(x[7], y[7], b)
	z[8], b = bits.Sub64(x[8], y[8], b)
	z[9], b = bits.Sub64(x[9], y[9], b)
	z[10], b = bits.Sub64(x[10], y[10], b)
	z[11], b = bits.Sub64(x[11], y[11], b)
	if b != 0 {
		var c uint64
		z[0], c = bits.Add64(z[0], 17626244516597989515, 0)
		z[1], c = bits.Add64(z[1], 16614129118623039618, c)
		z[2], c = bits.Add64(z[2], 1588918198704579639, c)
		z[3], c = bits.Add64(z[3], 10998096788944562424, c)
		z[4], c = bits.Add64(z[4], 8204665564953313070, c)
		z[5], c = bits.Add64(z[5], 9694500593442880912, c)
		z[6], c = bits.Add64(z[6], 274362232328168196, c)
		z[7], c = bits.Add64(z[7], 8105254717682411801, c)
		z[8], c = bits.Add64(z[8], 5945444129596489281, c)
		z[9], c = bits.Add64(z[9], 13341377791855249032, c)
		z[10], c = bits.Add64(z[10], 15098257552581525310, c)
		z[11], _ = bits.Add64(z[11], 81882988782276106, c)
	}
}

func lsubAssign(z, y *fe) {
	var b uint64
	z[0], b = bits.Sub64(z[0], y[0], 0)
	z[1], b = bits.Sub64(z[1], y[1], b)
	z[2], b = bits.Sub64(z[2], y[2], b)
	z[3], b = bits.Sub64(z[3], y[3], b)
	z[4], b = bits.Sub64(z[4], y[4], b)
	z[5], b = bits.Sub64(z[5], y[5], b)
	z[6], b = bits.Sub64(z[6], y[6], b)
	z[7], b = bits.Sub64(z[7], y[7], b)
	z[8], b = bits.Sub64(z[8], y[8], b)
	z[9], b = bits.Sub64(z[9], y[9], b)
	z[10], b = bits.Sub64(z[10], y[10], b)
	z[11], b = bits.Sub64(z[11], y[11], b)
	if b != 0 {
		var c uint64
		z[0], c = bits.Add64(z[0], 17626244516597989515, 0)
		z[1], c = bits.Add64(z[1], 16614129118623039618, c)
		z[2], c = bits.Add64(z[2], 1588918198704579639, c)
		z[3], c = bits.Add64(z[3], 10998096788944562424, c)
		z[4], c = bits.Add64(z[4], 8204665564953313070, c)
		z[5], c = bits.Add64(z[5], 9694500593442880912, c)
		z[6], c = bits.Add64(z[6], 274362232328168196, c)
		z[7], c = bits.Add64(z[7], 8105254717682411801, c)
		z[8], c = bits.Add64(z[8], 5945444129596489281, c)
		z[9], c = bits.Add64(z[9], 13341377791855249032, c)
		z[10], c = bits.Add64(z[10], 15098257552581525310, c)
		z[11], _ = bits.Add64(z[11], 81882988782276106, c)
	}
}

func neg(z, x *fe) {
	if x.isZero() {
		z.zero()
		return
	}
	var borrow uint64
	z[0], borrow = bits.Sub64(17626244516597989515, x[0], 0)
	z[1], borrow = bits.Sub64(16614129118623039618, x[1], borrow)
	z[2], borrow = bits.Sub64(1588918198704579639, x[2], borrow)
	z[3], borrow = bits.Sub64(10998096788944562424, x[3], borrow)
	z[4], borrow = bits.Sub64(8204665564953313070, x[4], borrow)
	z[5], borrow = bits.Sub64(9694500593442880912, x[5], borrow)
	z[6], borrow = bits.Sub64(274362232328168196, x[6], borrow)
	z[7], borrow = bits.Sub64(8105254717682411801, x[7], borrow)
	z[8], borrow = bits.Sub64(5945444129596489281, x[8], borrow)
	z[9], borrow = bits.Sub64(13341377791855249032, x[9], borrow)
	z[10], borrow = bits.Sub64(15098257552581525310, x[10], borrow)
	z[11], _ = bits.Sub64(81882988782276106, x[11], borrow)
}

// element.go
// Copyright 2020 ConsenSys AG
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by goff (v0.3.2) DO NOT EDIT

func mul(z, x, y *fe) {

	var t [12]uint64
	var c [3]uint64
	{
		// round 0
		v := x[0]
		c[1], c[0] = bits.Mul64(v, y[0])
		m := c[0] * 744663313386281181
		c[2] = madd0(m, 17626244516597989515, c[0])
		c[1], c[0] = madd1(v, y[1], c[1])
		c[2], t[0] = madd2(m, 16614129118623039618, c[2], c[0])
		c[1], c[0] = madd1(v, y[2], c[1])
		c[2], t[1] = madd2(m, 1588918198704579639, c[2], c[0])
		c[1], c[0] = madd1(v, y[3], c[1])
		c[2], t[2] = madd2(m, 10998096788944562424, c[2], c[0])
		c[1], c[0] = madd1(v, y[4], c[1])
		c[2], t[3] = madd2(m, 8204665564953313070, c[2], c[0])
		c[1], c[0] = madd1(v, y[5], c[1])
		c[2], t[4] = madd2(m, 9694500593442880912, c[2], c[0])
		c[1], c[0] = madd1(v, y[6], c[1])
		c[2], t[5] = madd2(m, 274362232328168196, c[2], c[0])
		c[1], c[0] = madd1(v, y[7], c[1])
		c[2], t[6] = madd2(m, 8105254717682411801, c[2], c[0])
		c[1], c[0] = madd1(v, y[8], c[1])
		c[2], t[7] = madd2(m, 5945444129596489281, c[2], c[0])
		c[1], c[0] = madd1(v, y[9], c[1])
		c[2], t[8] = madd2(m, 13341377791855249032, c[2], c[0])
		c[1], c[0] = madd1(v, y[10], c[1])
		c[2], t[9] = madd2(m, 15098257552581525310, c[2], c[0])
		c[1], c[0] = madd1(v, y[11], c[1])
		t[11], t[10] = madd3(m, 81882988782276106, c[0], c[2], c[1])
	}
	{
		// round 1
		v := x[1]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 744663313386281181
		c[2] = madd0(m, 17626244516597989515, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 16614129118623039618, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 1588918198704579639, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 10998096788944562424, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 8204665564953313070, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 9694500593442880912, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 274362232328168196, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], t[6] = madd2(m, 8105254717682411801, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], t[7] = madd2(m, 5945444129596489281, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		c[2], t[8] = madd2(m, 13341377791855249032, c[2], c[0])
		c[1], c[0] = madd2(v, y[10], c[1], t[10])
		c[2], t[9] = madd2(m, 15098257552581525310, c[2], c[0])
		c[1], c[0] = madd2(v, y[11], c[1], t[11])
		t[11], t[10] = madd3(m, 81882988782276106, c[0], c[2], c[1])
	}
	{
		// round 2
		v := x[2]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 744663313386281181
		c[2] = madd0(m, 17626244516597989515, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 16614129118623039618, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 1588918198704579639, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 10998096788944562424, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 8204665564953313070, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 9694500593442880912, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 274362232328168196, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], t[6] = madd2(m, 8105254717682411801, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], t[7] = madd2(m, 5945444129596489281, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		c[2], t[8] = madd2(m, 13341377791855249032, c[2], c[0])
		c[1], c[0] = madd2(v, y[10], c[1], t[10])
		c[2], t[9] = madd2(m, 15098257552581525310, c[2], c[0])
		c[1], c[0] = madd2(v, y[11], c[1], t[11])
		t[11], t[10] = madd3(m, 81882988782276106, c[0], c[2], c[1])
	}
	{
		// round 3
		v := x[3]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 744663313386281181
		c[2] = madd0(m, 17626244516597989515, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 16614129118623039618, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 1588918198704579639, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 10998096788944562424, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 8204665564953313070, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 9694500593442880912, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 274362232328168196, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], t[6] = madd2(m, 8105254717682411801, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], t[7] = madd2(m, 5945444129596489281, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		c[2], t[8] = madd2(m, 13341377791855249032, c[2], c[0])
		c[1], c[0] = madd2(v, y[10], c[1], t[10])
		c[2], t[9] = madd2(m, 15098257552581525310, c[2], c[0])
		c[1], c[0] = madd2(v, y[11], c[1], t[11])
		t[11], t[10] = madd3(m, 81882988782276106, c[0], c[2], c[1])
	}
	{
		// round 4
		v := x[4]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 744663313386281181
		c[2] = madd0(m, 17626244516597989515, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 16614129118623039618, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 1588918198704579639, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 10998096788944562424, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 8204665564953313070, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 9694500593442880912, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 274362232328168196, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], t[6] = madd2(m, 8105254717682411801, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], t[7] = madd2(m, 5945444129596489281, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		c[2], t[8] = madd2(m, 13341377791855249032, c[2], c[0])
		c[1], c[0] = madd2(v, y[10], c[1], t[10])
		c[2], t[9] = madd2(m, 15098257552581525310, c[2], c[0])
		c[1], c[0] = madd2(v, y[11], c[1], t[11])
		t[11], t[10] = madd3(m, 81882988782276106, c[0], c[2], c[1])
	}
	{
		// round 5
		v := x[5]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 744663313386281181
		c[2] = madd0(m, 17626244516597989515, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 16614129118623039618, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 1588918198704579639, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 10998096788944562424, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 8204665564953313070, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 9694500593442880912, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 274362232328168196, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], t[6] = madd2(m, 8105254717682411801, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], t[7] = madd2(m, 5945444129596489281, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		c[2], t[8] = madd2(m, 13341377791855249032, c[2], c[0])
		c[1], c[0] = madd2(v, y[10], c[1], t[10])
		c[2], t[9] = madd2(m, 15098257552581525310, c[2], c[0])
		c[1], c[0] = madd2(v, y[11], c[1], t[11])
		t[11], t[10] = madd3(m, 81882988782276106, c[0], c[2], c[1])
	}
	{
		// round 6
		v := x[6]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 744663313386281181
		c[2] = madd0(m, 17626244516597989515, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 16614129118623039618, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 1588918198704579639, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 10998096788944562424, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 8204665564953313070, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 9694500593442880912, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 274362232328168196, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], t[6] = madd2(m, 8105254717682411801, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], t[7] = madd2(m, 5945444129596489281, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		c[2], t[8] = madd2(m, 13341377791855249032, c[2], c[0])
		c[1], c[0] = madd2(v, y[10], c[1], t[10])
		c[2], t[9] = madd2(m, 15098257552581525310, c[2], c[0])
		c[1], c[0] = madd2(v, y[11], c[1], t[11])
		t[11], t[10] = madd3(m, 81882988782276106, c[0], c[2], c[1])
	}
	{
		// round 7
		v := x[7]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 744663313386281181
		c[2] = madd0(m, 17626244516597989515, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 16614129118623039618, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 1588918198704579639, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 10998096788944562424, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 8204665564953313070, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 9694500593442880912, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 274362232328168196, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], t[6] = madd2(m, 8105254717682411801, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], t[7] = madd2(m, 5945444129596489281, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		c[2], t[8] = madd2(m, 13341377791855249032, c[2], c[0])
		c[1], c[0] = madd2(v, y[10], c[1], t[10])
		c[2], t[9] = madd2(m, 15098257552581525310, c[2], c[0])
		c[1], c[0] = madd2(v, y[11], c[1], t[11])
		t[11], t[10] = madd3(m, 81882988782276106, c[0], c[2], c[1])
	}
	{
		// round 8
		v := x[8]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 744663313386281181
		c[2] = madd0(m, 17626244516597989515, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 16614129118623039618, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 1588918198704579639, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 10998096788944562424, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 8204665564953313070, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 9694500593442880912, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 274362232328168196, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], t[6] = madd2(m, 8105254717682411801, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], t[7] = madd2(m, 5945444129596489281, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		c[2], t[8] = madd2(m, 13341377791855249032, c[2], c[0])
		c[1], c[0] = madd2(v, y[10], c[1], t[10])
		c[2], t[9] = madd2(m, 15098257552581525310, c[2], c[0])
		c[1], c[0] = madd2(v, y[11], c[1], t[11])
		t[11], t[10] = madd3(m, 81882988782276106, c[0], c[2], c[1])
	}
	{
		// round 9
		v := x[9]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 744663313386281181
		c[2] = madd0(m, 17626244516597989515, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 16614129118623039618, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 1588918198704579639, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 10998096788944562424, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 8204665564953313070, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 9694500593442880912, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 274362232328168196, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], t[6] = madd2(m, 8105254717682411801, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], t[7] = madd2(m, 5945444129596489281, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		c[2], t[8] = madd2(m, 13341377791855249032, c[2], c[0])
		c[1], c[0] = madd2(v, y[10], c[1], t[10])
		c[2], t[9] = madd2(m, 15098257552581525310, c[2], c[0])
		c[1], c[0] = madd2(v, y[11], c[1], t[11])
		t[11], t[10] = madd3(m, 81882988782276106, c[0], c[2], c[1])
	}
	{
		// round 10
		v := x[10]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 744663313386281181
		c[2] = madd0(m, 17626244516597989515, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 16614129118623039618, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 1588918198704579639, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 10998096788944562424, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 8204665564953313070, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 9694500593442880912, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 274362232328168196, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], t[6] = madd2(m, 8105254717682411801, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], t[7] = madd2(m, 5945444129596489281, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		c[2], t[8] = madd2(m, 13341377791855249032, c[2], c[0])
		c[1], c[0] = madd2(v, y[10], c[1], t[10])
		c[2], t[9] = madd2(m, 15098257552581525310, c[2], c[0])
		c[1], c[0] = madd2(v, y[11], c[1], t[11])
		t[11], t[10] = madd3(m, 81882988782276106, c[0], c[2], c[1])
	}
	{
		// round 11
		v := x[11]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 744663313386281181
		c[2] = madd0(m, 17626244516597989515, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], z[0] = madd2(m, 16614129118623039618, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], z[1] = madd2(m, 1588918198704579639, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], z[2] = madd2(m, 10998096788944562424, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], z[3] = madd2(m, 8204665564953313070, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], z[4] = madd2(m, 9694500593442880912, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], z[5] = madd2(m, 274362232328168196, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], z[6] = madd2(m, 8105254717682411801, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], z[7] = madd2(m, 5945444129596489281, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		c[2], z[8] = madd2(m, 13341377791855249032, c[2], c[0])
		c[1], c[0] = madd2(v, y[10], c[1], t[10])
		c[2], z[9] = madd2(m, 15098257552581525310, c[2], c[0])
		c[1], c[0] = madd2(v, y[11], c[1], t[11])
		z[11], z[10] = madd3(m, 81882988782276106, c[0], c[2], c[1])
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[11] < 81882988782276106 || (z[11] == 81882988782276106 && (z[10] < 15098257552581525310 || (z[10] == 15098257552581525310 && (z[9] < 13341377791855249032 || (z[9] == 13341377791855249032 && (z[8] < 5945444129596489281 || (z[8] == 5945444129596489281 && (z[7] < 8105254717682411801 || (z[7] == 8105254717682411801 && (z[6] < 274362232328168196 || (z[6] == 274362232328168196 && (z[5] < 9694500593442880912 || (z[5] == 9694500593442880912 && (z[4] < 8204665564953313070 || (z[4] == 8204665564953313070 && (z[3] < 10998096788944562424 || (z[3] == 10998096788944562424 && (z[2] < 1588918198704579639 || (z[2] == 1588918198704579639 && (z[1] < 16614129118623039618 || (z[1] == 16614129118623039618 && (z[0] < 17626244516597989515))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 17626244516597989515, 0)
		z[1], b = bits.Sub64(z[1], 16614129118623039618, b)
		z[2], b = bits.Sub64(z[2], 1588918198704579639, b)
		z[3], b = bits.Sub64(z[3], 10998096788944562424, b)
		z[4], b = bits.Sub64(z[4], 8204665564953313070, b)
		z[5], b = bits.Sub64(z[5], 9694500593442880912, b)
		z[6], b = bits.Sub64(z[6], 274362232328168196, b)
		z[7], b = bits.Sub64(z[7], 8105254717682411801, b)
		z[8], b = bits.Sub64(z[8], 5945444129596489281, b)
		z[9], b = bits.Sub64(z[9], 13341377791855249032, b)
		z[10], b = bits.Sub64(z[10], 15098257552581525310, b)
		z[11], _ = bits.Sub64(z[11], 81882988782276106, b)
	}
}

func square(z, x *fe) {

	var t [12]uint64
	var c [3]uint64
	{
		// round 0
		v := x[0]
		c[1], c[0] = bits.Mul64(v, x[0])
		m := c[0] * 744663313386281181
		c[2] = madd0(m, 17626244516597989515, c[0])
		c[1], c[0] = madd1(v, x[1], c[1])
		c[2], t[0] = madd2(m, 16614129118623039618, c[2], c[0])
		c[1], c[0] = madd1(v, x[2], c[1])
		c[2], t[1] = madd2(m, 1588918198704579639, c[2], c[0])
		c[1], c[0] = madd1(v, x[3], c[1])
		c[2], t[2] = madd2(m, 10998096788944562424, c[2], c[0])
		c[1], c[0] = madd1(v, x[4], c[1])
		c[2], t[3] = madd2(m, 8204665564953313070, c[2], c[0])
		c[1], c[0] = madd1(v, x[5], c[1])
		c[2], t[4] = madd2(m, 9694500593442880912, c[2], c[0])
		c[1], c[0] = madd1(v, x[6], c[1])
		c[2], t[5] = madd2(m, 274362232328168196, c[2], c[0])
		c[1], c[0] = madd1(v, x[7], c[1])
		c[2], t[6] = madd2(m, 8105254717682411801, c[2], c[0])
		c[1], c[0] = madd1(v, x[8], c[1])
		c[2], t[7] = madd2(m, 5945444129596489281, c[2], c[0])
		c[1], c[0] = madd1(v, x[9], c[1])
		c[2], t[8] = madd2(m, 13341377791855249032, c[2], c[0])
		c[1], c[0] = madd1(v, x[10], c[1])
		c[2], t[9] = madd2(m, 15098257552581525310, c[2], c[0])
		c[1], c[0] = madd1(v, x[11], c[1])
		t[11], t[10] = madd3(m, 81882988782276106, c[0], c[2], c[1])
	}
	{
		// round 1
		v := x[1]
		c[1], c[0] = madd1(v, x[0], t[0])
		m := c[0] * 744663313386281181
		c[2] = madd0(m, 17626244516597989515, c[0])
		c[1], c[0] = madd2(v, x[1], c[1], t[1])
		c[2], t[0] = madd2(m, 16614129118623039618, c[2], c[0])
		c[1], c[0] = madd2(v, x[2], c[1], t[2])
		c[2], t[1] = madd2(m, 1588918198704579639, c[2], c[0])
		c[1], c[0] = madd2(v, x[3], c[1], t[3])
		c[2], t[2] = madd2(m, 10998096788944562424, c[2], c[0])
		c[1], c[0] = madd2(v, x[4], c[1], t[4])
		c[2], t[3] = madd2(m, 8204665564953313070, c[2], c[0])
		c[1], c[0] = madd2(v, x[5], c[1], t[5])
		c[2], t[4] = madd2(m, 9694500593442880912, c[2], c[0])
		c[1], c[0] = madd2(v, x[6], c[1], t[6])
		c[2], t[5] = madd2(m, 274362232328168196, c[2], c[0])
		c[1], c[0] = madd2(v, x[7], c[1], t[7])
		c[2], t[6] = madd2(m, 8105254717682411801, c[2], c[0])
		c[1], c[0] = madd2(v, x[8], c[1], t[8])
		c[2], t[7] = madd2(m, 5945444129596489281, c[2], c[0])
		c[1], c[0] = madd2(v, x[9], c[1], t[9])
		c[2], t[8] = madd2(m, 13341377791855249032, c[2], c[0])
		c[1], c[0] = madd2(v, x[10], c[1], t[10])
		c[2], t[9] = madd2(m, 15098257552581525310, c[2], c[0])
		c[1], c[0] = madd2(v, x[11], c[1], t[11])
		t[11], t[10] = madd3(m, 81882988782276106, c[0], c[2], c[1])
	}
	{
		// round 2
		v := x[2]
		c[1], c[0] = madd1(v, x[0], t[0])
		m := c[0] * 744663313386281181
		c[2] = madd0(m, 17626244516597989515, c[0])
		c[1], c[0] = madd2(v, x[1], c[1], t[1])
		c[2], t[0] = madd2(m, 16614129118623039618, c[2], c[0])
		c[1], c[0] = madd2(v, x[2], c[1], t[2])
		c[2], t[1] = madd2(m, 1588918198704579639, c[2], c[0])
		c[1], c[0] = madd2(v, x[3], c[1], t[3])
		c[2], t[2] = madd2(m, 10998096788944562424, c[2], c[0])
		c[1], c[0] = madd2(v, x[4], c[1], t[4])
		c[2], t[3] = madd2(m, 8204665564953313070, c[2], c[0])
		c[1], c[0] = madd2(v, x[5], c[1], t[5])
		c[2], t[4] = madd2(m, 9694500593442880912, c[2], c[0])
		c[1], c[0] = madd2(v, x[6], c[1], t[6])
		c[2], t[5] = madd2(m, 274362232328168196, c[2], c[0])
		c[1], c[0] = madd2(v, x[7], c[1], t[7])
		c[2], t[6] = madd2(m, 8105254717682411801, c[2], c[0])
		c[1], c[0] = madd2(v, x[8], c[1], t[8])
		c[2], t[7] = madd2(m, 5945444129596489281, c[2], c[0])
		c[1], c[0] = madd2(v, x[9], c[1], t[9])
		c[2], t[8] = madd2(m, 13341377791855249032, c[2], c[0])
		c[1], c[0] = madd2(v, x[10], c[1], t[10])
		c[2], t[9] = madd2(m, 15098257552581525310, c[2], c[0])
		c[1], c[0] = madd2(v, x[11], c[1], t[11])
		t[11], t[10] = madd3(m, 81882988782276106, c[0], c[2], c[1])
	}
	{
		// round 3
		v := x[3]
		c[1], c[0] = madd1(v, x[0], t[0])
		m := c[0] * 744663313386281181
		c[2] = madd0(m, 17626244516597989515, c[0])
		c[1], c[0] = madd2(v, x[1], c[1], t[1])
		c[2], t[0] = madd2(m, 16614129118623039618, c[2], c[0])
		c[1], c[0] = madd2(v, x[2], c[1], t[2])
		c[2], t[1] = madd2(m, 1588918198704579639, c[2], c[0])
		c[1], c[0] = madd2(v, x[3], c[1], t[3])
		c[2], t[2] = madd2(m, 10998096788944562424, c[2], c[0])
		c[1], c[0] = madd2(v, x[4], c[1], t[4])
		c[2], t[3] = madd2(m, 8204665564953313070, c[2], c[0])
		c[1], c[0] = madd2(v, x[5], c[1], t[5])
		c[2], t[4] = madd2(m, 9694500593442880912, c[2], c[0])
		c[1], c[0] = madd2(v, x[6], c[1], t[6])
		c[2], t[5] = madd2(m, 274362232328168196, c[2], c[0])
		c[1], c[0] = madd2(v, x[7], c[1], t[7])
		c[2], t[6] = madd2(m, 8105254717682411801, c[2], c[0])
		c[1], c[0] = madd2(v, x[8], c[1], t[8])
		c[2], t[7] = madd2(m, 5945444129596489281, c[2], c[0])
		c[1], c[0] = madd2(v, x[9], c[1], t[9])
		c[2], t[8] = madd2(m, 13341377791855249032, c[2], c[0])
		c[1], c[0] = madd2(v, x[10], c[1], t[10])
		c[2], t[9] = madd2(m, 15098257552581525310, c[2], c[0])
		c[1], c[0] = madd2(v, x[11], c[1], t[11])
		t[11], t[10] = madd3(m, 81882988782276106, c[0], c[2], c[1])
	}
	{
		// round 4
		v := x[4]
		c[1], c[0] = madd1(v, x[0], t[0])
		m := c[0] * 744663313386281181
		c[2] = madd0(m, 17626244516597989515, c[0])
		c[1], c[0] = madd2(v, x[1], c[1], t[1])
		c[2], t[0] = madd2(m, 16614129118623039618, c[2], c[0])
		c[1], c[0] = madd2(v, x[2], c[1], t[2])
		c[2], t[1] = madd2(m, 1588918198704579639, c[2], c[0])
		c[1], c[0] = madd2(v, x[3], c[1], t[3])
		c[2], t[2] = madd2(m, 10998096788944562424, c[2], c[0])
		c[1], c[0] = madd2(v, x[4], c[1], t[4])
		c[2], t[3] = madd2(m, 8204665564953313070, c[2], c[0])
		c[1], c[0] = madd2(v, x[5], c[1], t[5])
		c[2], t[4] = madd2(m, 9694500593442880912, c[2], c[0])
		c[1], c[0] = madd2(v, x[6], c[1], t[6])
		c[2], t[5] = madd2(m, 274362232328168196, c[2], c[0])
		c[1], c[0] = madd2(v, x[7], c[1], t[7])
		c[2], t[6] = madd2(m, 8105254717682411801, c[2], c[0])
		c[1], c[0] = madd2(v, x[8], c[1], t[8])
		c[2], t[7] = madd2(m, 5945444129596489281, c[2], c[0])
		c[1], c[0] = madd2(v, x[9], c[1], t[9])
		c[2], t[8] = madd2(m, 13341377791855249032, c[2], c[0])
		c[1], c[0] = madd2(v, x[10], c[1], t[10])
		c[2], t[9] = madd2(m, 15098257552581525310, c[2], c[0])
		c[1], c[0] = madd2(v, x[11], c[1], t[11])
		t[11], t[10] = madd3(m, 81882988782276106, c[0], c[2], c[1])
	}
	{
		// round 5
		v := x[5]
		c[1], c[0] = madd1(v, x[0], t[0])
		m := c[0] * 744663313386281181
		c[2] = madd0(m, 17626244516597989515, c[0])
		c[1], c[0] = madd2(v, x[1], c[1], t[1])
		c[2], t[0] = madd2(m, 16614129118623039618, c[2], c[0])
		c[1], c[0] = madd2(v, x[2], c[1], t[2])
		c[2], t[1] = madd2(m, 1588918198704579639, c[2], c[0])
		c[1], c[0] = madd2(v, x[3], c[1], t[3])
		c[2], t[2] = madd2(m, 10998096788944562424, c[2], c[0])
		c[1], c[0] = madd2(v, x[4], c[1], t[4])
		c[2], t[3] = madd2(m, 8204665564953313070, c[2], c[0])
		c[1], c[0] = madd2(v, x[5], c[1], t[5])
		c[2], t[4] = madd2(m, 9694500593442880912, c[2], c[0])
		c[1], c[0] = madd2(v, x[6], c[1], t[6])
		c[2], t[5] = madd2(m, 274362232328168196, c[2], c[0])
		c[1], c[0] = madd2(v, x[7], c[1], t[7])
		c[2], t[6] = madd2(m, 8105254717682411801, c[2], c[0])
		c[1], c[0] = madd2(v, x[8], c[1], t[8])
		c[2], t[7] = madd2(m, 5945444129596489281, c[2], c[0])
		c[1], c[0] = madd2(v, x[9], c[1], t[9])
		c[2], t[8] = madd2(m, 13341377791855249032, c[2], c[0])
		c[1], c[0] = madd2(v, x[10], c[1], t[10])
		c[2], t[9] = madd2(m, 15098257552581525310, c[2], c[0])
		c[1], c[0] = madd2(v, x[11], c[1], t[11])
		t[11], t[10] = madd3(m, 81882988782276106, c[0], c[2], c[1])
	}
	{
		// round 6
		v := x[6]
		c[1], c[0] = madd1(v, x[0], t[0])
		m := c[0] * 744663313386281181
		c[2] = madd0(m, 17626244516597989515, c[0])
		c[1], c[0] = madd2(v, x[1], c[1], t[1])
		c[2], t[0] = madd2(m, 16614129118623039618, c[2], c[0])
		c[1], c[0] = madd2(v, x[2], c[1], t[2])
		c[2], t[1] = madd2(m, 1588918198704579639, c[2], c[0])
		c[1], c[0] = madd2(v, x[3], c[1], t[3])
		c[2], t[2] = madd2(m, 10998096788944562424, c[2], c[0])
		c[1], c[0] = madd2(v, x[4], c[1], t[4])
		c[2], t[3] = madd2(m, 8204665564953313070, c[2], c[0])
		c[1], c[0] = madd2(v, x[5], c[1], t[5])
		c[2], t[4] = madd2(m, 9694500593442880912, c[2], c[0])
		c[1], c[0] = madd2(v, x[6], c[1], t[6])
		c[2], t[5] = madd2(m, 274362232328168196, c[2], c[0])
		c[1], c[0] = madd2(v, x[7], c[1], t[7])
		c[2], t[6] = madd2(m, 8105254717682411801, c[2], c[0])
		c[1], c[0] = madd2(v, x[8], c[1], t[8])
		c[2], t[7] = madd2(m, 5945444129596489281, c[2], c[0])
		c[1], c[0] = madd2(v, x[9], c[1], t[9])
		c[2], t[8] = madd2(m, 13341377791855249032, c[2], c[0])
		c[1], c[0] = madd2(v, x[10], c[1], t[10])
		c[2], t[9] = madd2(m, 15098257552581525310, c[2], c[0])
		c[1], c[0] = madd2(v, x[11], c[1], t[11])
		t[11], t[10] = madd3(m, 81882988782276106, c[0], c[2], c[1])
	}
	{
		// round 7
		v := x[7]
		c[1], c[0] = madd1(v, x[0], t[0])
		m := c[0] * 744663313386281181
		c[2] = madd0(m, 17626244516597989515, c[0])
		c[1], c[0] = madd2(v, x[1], c[1], t[1])
		c[2], t[0] = madd2(m, 16614129118623039618, c[2], c[0])
		c[1], c[0] = madd2(v, x[2], c[1], t[2])
		c[2], t[1] = madd2(m, 1588918198704579639, c[2], c[0])
		c[1], c[0] = madd2(v, x[3], c[1], t[3])
		c[2], t[2] = madd2(m, 10998096788944562424, c[2], c[0])
		c[1], c[0] = madd2(v, x[4], c[1], t[4])
		c[2], t[3] = madd2(m, 8204665564953313070, c[2], c[0])
		c[1], c[0] = madd2(v, x[5], c[1], t[5])
		c[2], t[4] = madd2(m, 9694500593442880912, c[2], c[0])
		c[1], c[0] = madd2(v, x[6], c[1], t[6])
		c[2], t[5] = madd2(m, 274362232328168196, c[2], c[0])
		c[1], c[0] = madd2(v, x[7], c[1], t[7])
		c[2], t[6] = madd2(m, 8105254717682411801, c[2], c[0])
		c[1], c[0] = madd2(v, x[8], c[1], t[8])
		c[2], t[7] = madd2(m, 5945444129596489281, c[2], c[0])
		c[1], c[0] = madd2(v, x[9], c[1], t[9])
		c[2], t[8] = madd2(m, 13341377791855249032, c[2], c[0])
		c[1], c[0] = madd2(v, x[10], c[1], t[10])
		c[2], t[9] = madd2(m, 15098257552581525310, c[2], c[0])
		c[1], c[0] = madd2(v, x[11], c[1], t[11])
		t[11], t[10] = madd3(m, 81882988782276106, c[0], c[2], c[1])
	}
	{
		// round 8
		v := x[8]
		c[1], c[0] = madd1(v, x[0], t[0])
		m := c[0] * 744663313386281181
		c[2] = madd0(m, 17626244516597989515, c[0])
		c[1], c[0] = madd2(v, x[1], c[1], t[1])
		c[2], t[0] = madd2(m, 16614129118623039618, c[2], c[0])
		c[1], c[0] = madd2(v, x[2], c[1], t[2])
		c[2], t[1] = madd2(m, 1588918198704579639, c[2], c[0])
		c[1], c[0] = madd2(v, x[3], c[1], t[3])
		c[2], t[2] = madd2(m, 10998096788944562424, c[2], c[0])
		c[1], c[0] = madd2(v, x[4], c[1], t[4])
		c[2], t[3] = madd2(m, 8204665564953313070, c[2], c[0])
		c[1], c[0] = madd2(v, x[5], c[1], t[5])
		c[2], t[4] = madd2(m, 9694500593442880912, c[2], c[0])
		c[1], c[0] = madd2(v, x[6], c[1], t[6])
		c[2], t[5] = madd2(m, 274362232328168196, c[2], c[0])
		c[1], c[0] = madd2(v, x[7], c[1], t[7])
		c[2], t[6] = madd2(m, 8105254717682411801, c[2], c[0])
		c[1], c[0] = madd2(v, x[8], c[1], t[8])
		c[2], t[7] = madd2(m, 5945444129596489281, c[2], c[0])
		c[1], c[0] = madd2(v, x[9], c[1], t[9])
		c[2], t[8] = madd2(m, 13341377791855249032, c[2], c[0])
		c[1], c[0] = madd2(v, x[10], c[1], t[10])
		c[2], t[9] = madd2(m, 15098257552581525310, c[2], c[0])
		c[1], c[0] = madd2(v, x[11], c[1], t[11])
		t[11], t[10] = madd3(m, 81882988782276106, c[0], c[2], c[1])
	}
	{
		// round 9
		v := x[9]
		c[1], c[0] = madd1(v, x[0], t[0])
		m := c[0] * 744663313386281181
		c[2] = madd0(m, 17626244516597989515, c[0])
		c[1], c[0] = madd2(v, x[1], c[1], t[1])
		c[2], t[0] = madd2(m, 16614129118623039618, c[2], c[0])
		c[1], c[0] = madd2(v, x[2], c[1], t[2])
		c[2], t[1] = madd2(m, 1588918198704579639, c[2], c[0])
		c[1], c[0] = madd2(v, x[3], c[1], t[3])
		c[2], t[2] = madd2(m, 10998096788944562424, c[2], c[0])
		c[1], c[0] = madd2(v, x[4], c[1], t[4])
		c[2], t[3] = madd2(m, 8204665564953313070, c[2], c[0])
		c[1], c[0] = madd2(v, x[5], c[1], t[5])
		c[2], t[4] = madd2(m, 9694500593442880912, c[2], c[0])
		c[1], c[0] = madd2(v, x[6], c[1], t[6])
		c[2], t[5] = madd2(m, 274362232328168196, c[2], c[0])
		c[1], c[0] = madd2(v, x[7], c[1], t[7])
		c[2], t[6] = madd2(m, 8105254717682411801, c[2], c[0])
		c[1], c[0] = madd2(v, x[8], c[1], t[8])
		c[2], t[7] = madd2(m, 5945444129596489281, c[2], c[0])
		c[1], c[0] = madd2(v, x[9], c[1], t[9])
		c[2], t[8] = madd2(m, 13341377791855249032, c[2], c[0])
		c[1], c[0] = madd2(v, x[10], c[1], t[10])
		c[2], t[9] = madd2(m, 15098257552581525310, c[2], c[0])
		c[1], c[0] = madd2(v, x[11], c[1], t[11])
		t[11], t[10] = madd3(m, 81882988782276106, c[0], c[2], c[1])
	}
	{
		// round 10
		v := x[10]
		c[1], c[0] = madd1(v, x[0], t[0])
		m := c[0] * 744663313386281181
		c[2] = madd0(m, 17626244516597989515, c[0])
		c[1], c[0] = madd2(v, x[1], c[1], t[1])
		c[2], t[0] = madd2(m, 16614129118623039618, c[2], c[0])
		c[1], c[0] = madd2(v, x[2], c[1], t[2])
		c[2], t[1] = madd2(m, 1588918198704579639, c[2], c[0])
		c[1], c[0] = madd2(v, x[3], c[1], t[3])
		c[2], t[2] = madd2(m, 10998096788944562424, c[2], c[0])
		c[1], c[0] = madd2(v, x[4], c[1], t[4])
		c[2], t[3] = madd2(m, 8204665564953313070, c[2], c[0])
		c[1], c[0] = madd2(v, x[5], c[1], t[5])
		c[2], t[4] = madd2(m, 9694500593442880912, c[2], c[0])
		c[1], c[0] = madd2(v, x[6], c[1], t[6])
		c[2], t[5] = madd2(m, 274362232328168196, c[2], c[0])
		c[1], c[0] = madd2(v, x[7], c[1], t[7])
		c[2], t[6] = madd2(m, 8105254717682411801, c[2], c[0])
		c[1], c[0] = madd2(v, x[8], c[1], t[8])
		c[2], t[7] = madd2(m, 5945444129596489281, c[2], c[0])
		c[1], c[0] = madd2(v, x[9], c[1], t[9])
		c[2], t[8] = madd2(m, 13341377791855249032, c[2], c[0])
		c[1], c[0] = madd2(v, x[10], c[1], t[10])
		c[2], t[9] = madd2(m, 15098257552581525310, c[2], c[0])
		c[1], c[0] = madd2(v, x[11], c[1], t[11])
		t[11], t[10] = madd3(m, 81882988782276106, c[0], c[2], c[1])
	}
	{
		// round 11
		v := x[11]
		c[1], c[0] = madd1(v, x[0], t[0])
		m := c[0] * 744663313386281181
		c[2] = madd0(m, 17626244516597989515, c[0])
		c[1], c[0] = madd2(v, x[1], c[1], t[1])
		c[2], z[0] = madd2(m, 16614129118623039618, c[2], c[0])
		c[1], c[0] = madd2(v, x[2], c[1], t[2])
		c[2], z[1] = madd2(m, 1588918198704579639, c[2], c[0])
		c[1], c[0] = madd2(v, x[3], c[1], t[3])
		c[2], z[2] = madd2(m, 10998096788944562424, c[2], c[0])
		c[1], c[0] = madd2(v, x[4], c[1], t[4])
		c[2], z[3] = madd2(m, 8204665564953313070, c[2], c[0])
		c[1], c[0] = madd2(v, x[5], c[1], t[5])
		c[2], z[4] = madd2(m, 9694500593442880912, c[2], c[0])
		c[1], c[0] = madd2(v, x[6], c[1], t[6])
		c[2], z[5] = madd2(m, 274362232328168196, c[2], c[0])
		c[1], c[0] = madd2(v, x[7], c[1], t[7])
		c[2], z[6] = madd2(m, 8105254717682411801, c[2], c[0])
		c[1], c[0] = madd2(v, x[8], c[1], t[8])
		c[2], z[7] = madd2(m, 5945444129596489281, c[2], c[0])
		c[1], c[0] = madd2(v, x[9], c[1], t[9])
		c[2], z[8] = madd2(m, 13341377791855249032, c[2], c[0])
		c[1], c[0] = madd2(v, x[10], c[1], t[10])
		c[2], z[9] = madd2(m, 15098257552581525310, c[2], c[0])
		c[1], c[0] = madd2(v, x[11], c[1], t[11])
		z[11], z[10] = madd3(m, 81882988782276106, c[0], c[2], c[1])
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[11] < 81882988782276106 || (z[11] == 81882988782276106 && (z[10] < 15098257552581525310 || (z[10] == 15098257552581525310 && (z[9] < 13341377791855249032 || (z[9] == 13341377791855249032 && (z[8] < 5945444129596489281 || (z[8] == 5945444129596489281 && (z[7] < 8105254717682411801 || (z[7] == 8105254717682411801 && (z[6] < 274362232328168196 || (z[6] == 274362232328168196 && (z[5] < 9694500593442880912 || (z[5] == 9694500593442880912 && (z[4] < 8204665564953313070 || (z[4] == 8204665564953313070 && (z[3] < 10998096788944562424 || (z[3] == 10998096788944562424 && (z[2] < 1588918198704579639 || (z[2] == 1588918198704579639 && (z[1] < 16614129118623039618 || (z[1] == 16614129118623039618 && (z[0] < 17626244516597989515))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 17626244516597989515, 0)
		z[1], b = bits.Sub64(z[1], 16614129118623039618, b)
		z[2], b = bits.Sub64(z[2], 1588918198704579639, b)
		z[3], b = bits.Sub64(z[3], 10998096788944562424, b)
		z[4], b = bits.Sub64(z[4], 8204665564953313070, b)
		z[5], b = bits.Sub64(z[5], 9694500593442880912, b)
		z[6], b = bits.Sub64(z[6], 274362232328168196, b)
		z[7], b = bits.Sub64(z[7], 8105254717682411801, b)
		z[8], b = bits.Sub64(z[8], 5945444129596489281, b)
		z[9], b = bits.Sub64(z[9], 13341377791855249032, b)
		z[10], b = bits.Sub64(z[10], 15098257552581525310, b)
		z[11], _ = bits.Sub64(z[11], 81882988782276106, b)
	}
}

// arith.go
// Copyright 2020 ConsenSys AG
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by goff (v0.3.2) DO NOT EDIT

// madd0 hi = a*b + c (discards lo bits)
func madd0(a, b, c uint64) (hi uint64) {
	var carry, lo uint64
	hi, lo = bits.Mul64(a, b)
	_, carry = bits.Add64(lo, c, 0)
	hi, _ = bits.Add64(hi, 0, carry)
	return
}

// madd1 hi, lo = a*b + c
func madd1(a, b, c uint64) (hi uint64, lo uint64) {
	var carry uint64
	hi, lo = bits.Mul64(a, b)
	lo, carry = bits.Add64(lo, c, 0)
	hi, _ = bits.Add64(hi, 0, carry)
	return
}

// madd2 hi, lo = a*b + c + d
func madd2(a, b, c, d uint64) (hi uint64, lo uint64) {
	var carry uint64
	hi, lo = bits.Mul64(a, b)
	c, carry = bits.Add64(c, d, 0)
	hi, _ = bits.Add64(hi, 0, carry)
	lo, carry = bits.Add64(lo, c, 0)
	hi, _ = bits.Add64(hi, 0, carry)
	return
}

func madd3(a, b, c, d, e uint64) (hi uint64, lo uint64) {
	var carry uint64
	hi, lo = bits.Mul64(a, b)
	c, carry = bits.Add64(c, d, 0)
	hi, _ = bits.Add64(hi, 0, carry)
	lo, carry = bits.Add64(lo, c, 0)
	hi, _ = bits.Add64(hi, e, carry)
	return
}
